@page "/InventoryCounting"
@using Finomal.UI.Blazor.Components.model
@using Finomal.UI.Blazor.Components.Layout

<div class="container-fluid">
    <h3><i class="fas fa-tasks me-2"></i>مدیریت انبارگردانی و شمارش</h3>
    <p>از این بخش برای مدیریت دوره‌های شمارش، ثبت مقادیر و مشاهده مغایرت‌ها استفاده کنید.</p>

    @* --- نوار ابزار اصلی برای انتخاب نما --- *@
    <div class="btn-toolbar mb-3" role="toolbar">
        <div class="btn-group me-2" role="group">
            <button type="button" class="btn @(currentView == ActiveView.RegisterCount ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetActiveView(ActiveView.RegisterCount)"><i class="fas fa-pen me-1"></i>ثبت شمارش کالا</button>
            <button type="button" class="btn @(currentView == ActiveView.CountLists ? "btn-outline-secondary" : "btn-secondary")" @onclick="() => SetActiveView(ActiveView.CountLists)"><i class="fas fa-list-alt me-1"></i>فهرست دوره‌های شمارش</button>
        </div>
        <div class="btn-group" role="group">
            <button type="button" class="btn @(currentView == ActiveView.CountStatus ? "btn-outline-info" : "btn-info")" @onclick="() => SetActiveView(ActiveView.CountStatus)"><i class="fas fa-question-circle me-1"></i>وضعیت شمارش</button>
            <button type="button" class="btn @(currentView == ActiveView.QuantityDiscrepancy ? "btn-outline-warning" : "btn-warning")" @onclick="() => SetActiveView(ActiveView.QuantityDiscrepancy)"><i class="fas fa-balance-scale-left me-1"></i>مغایرت تعدادی</button>
            <button type="button" class="btn @(currentView == ActiveView.MonetaryDiscrepancy ? "btn-outline-danger" : "btn-danger")" @onclick="() => SetActiveView(ActiveView.MonetaryDiscrepancy)"><i class="fas fa-file-invoice-dollar me-1"></i>مغایرت ریالی</button>
        </div>
    </div>
    <hr />

    @* --- بخش نمایش کامپوننت فعال --- *@
    <div class="mt-4">
        @* 1. کامپوننت ثبت شمارش کالا *@
        @if (currentView == ActiveView.RegisterCount)
        {
            <RegisterCountComponent stocktakeSessions="stocktakeSessions.Where(s => !s.IsCompleted).ToList()" />
        }
        @* 2. کامپوننت فهرست دوره‌های شمارش *@
        @if (currentView == ActiveView.CountLists)
        {
            <CountListsComponent stocktakeSessions="stocktakeSessions" />
        }
        @* 3. کامپوننت وضعیت شمارش (کالاهای شمارش شده و نشده) *@
        @if(currentView == ActiveView.CountStatus)
        {
            <CountStatusComponent stocktakeSessions="stocktakeSessions.Where(s => !s.IsCompleted).ToList()" />
        }
        @* 4. کامپوننت مغایرت‌های تعدادی *@
        @if (currentView == ActiveView.QuantityDiscrepancy)
        {
            <QuantityDiscrepancyComponent completedSessions="stocktakeSessions.Where(s => s.IsCompleted).ToList()" />
        }
        @* 5. کامپوننت مغایرت‌های ریالی *@
        @if (currentView == ActiveView.MonetaryDiscrepancy)
        {
            <MonetaryDiscrepancyComponent completedSessions="stocktakeSessions.Where(s => s.IsCompleted).ToList()" />
        }
    </div>
</div>

@code {
    private enum ActiveView { RegisterCount, CountLists, QuantityDiscrepancy, MonetaryDiscrepancy, CountStatus }
    private ActiveView currentView = ActiveView.RegisterCount;

    private List<StocktakeSession> stocktakeSessions = new();
    
    protected override void OnInitialized()
    {
        // --- Mock Data ---
        var products = new List<Product> {
            new Product { Id = 1, Name = "لپ تاپ Dell XPS", SellingPrice = 60000000 },
            new Product { Id = 2, Name = "مانیتور LG 24-inch", SellingPrice = 8000000 },
            new Product { Id = 3, Name = "هارد اکسترنال 1TB", SellingPrice = 2500000 }
        };

        stocktakeSessions = new List<StocktakeSession>
        {
            new StocktakeSession {
                Id = 1, Name = "شمارش انبار مرکزی - نیمه اول سال", WarehouseId = 1, IsCompleted = false,
                Items = new List<StocktakeItem> {
                    new StocktakeItem { Id = 101, Product = products[0], SystemQuantity = 50, CountedQuantity = 50 },
                    new StocktakeItem { Id = 102, Product = products[1], SystemQuantity = 120 }, // هنوز شمارش نشده
                    new StocktakeItem { Id = 103, Product = products[2], SystemQuantity = 200, CountedQuantity = 195 }
                }
            },
            new StocktakeSession {
                Id = 2, Name = "شمارش انبار فروش - پایان سال", WarehouseId = 2, IsCompleted = true,
                Items = new List<StocktakeItem> {
                    new StocktakeItem { Id = 201, Product = products[0], SystemQuantity = 10, CountedQuantity = 9 },
                    new StocktakeItem { Id = 202, Product = products[1], SystemQuantity = 30, CountedQuantity = 32 }
                }
            }
        };
    }

    private void SetActiveView(ActiveView view)
    {
        currentView = view;
    }
}
