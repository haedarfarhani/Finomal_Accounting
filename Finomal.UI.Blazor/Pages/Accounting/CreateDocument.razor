@page "/CreateDocument"
@using Finomal.Application.Accounting.CreateDocument
@using Finomal.Application.Accounting.Dtos
@using Finomal.Application.Accounting.GetDocuments
@inject ISender Sender
@inject IJSRuntime JSRuntime 
@* @inject NavigationManager NavigationManager -- برای ناوبری *@

<div>
    <h3>@GetTitle()</h3>

    <EditForm Model="@document" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card shadow-sm">
            <div class="card-body">
                <div class="row g-3">
                    @* ... (بخش فرم اصلی) ... *@
                    <div class="col-12 col-lg-6">
                        <label class="form-label">شرح سند:</label>
                        <InputText class="form-control" @bind-Value="document.Description" />
                    </div>
                    <div class="col-md-6 col-lg-3">
                        <label class="form-label">تاریخ:</label>
                        <InputDate class="form-control" @bind-Value="document.Date" />
                    </div>
                    <div class="col-md-6 col-lg-3">
                        <label class="form-label">کد حسابداری:</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <InputCheckbox @bind-Value="isManualAccountingCode" />
                                <span class="ms-2 small">دستی</span>
                            </div>
                            <InputText class="form-control" @bind-Value="document.AccountingCode" disabled="@(!isManualAccountingCode)" />
                        </div>
                    </div>
                     @* ... (سایر فیلدهای فرم اصلی) ... *@
                </div>
            </div>
        </div>

        <h4 class="mt-5">ردیف‌های سند</h4>
        <div class="table-responsive">
            <table class="table table-bordered table-striped align-middle">
                <thead class="table-light">
                    <tr>
                        <th>حساب</th>
                        <th>تفصیل</th>
                        <th>شرح</th>
                        <th>واحد</th>
                        <th style="min-width: 150px;">بدهکار</th>
                        <th style="min-width: 150px;">بستانکار</th>
                        <th><button type="button" class="btn btn-sm btn-success w-100" @onclick="AddNewRow">افزودن</button></th>
                    </tr>
                </thead>
                <tbody>
                    @if (!document.Items.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center p-4">برای شروع یک ردیف جدید اضافه کنید.</td>
                        </tr>
                    }
                    @foreach (var item in document.Items)
                    {
                        <tr @key="item.ItemId">
                            <td>
                                <InputSelect class="form-select" @bind-Value="item.AccountId">
                                    <option value="0">...</option>
                                    <option value="101">صندوق</option>
                                    <option value="201">هزینه‌ها</option>
                                </InputSelect>
                            </td>
                            <td>
                                <InputSelect class="form-select" @bind-Value="item.DetailId">
                                    <option value="0">...</option>
                                    <option value="1">آقای رضایی</option>
                                    <option value="2">شرکت نمونه</option>
                                </InputSelect>
                            </td>
                            <td><InputText class="form-control" @bind-Value="item.Description" /></td>
                            <td>
                                <InputSelect class="form-select" @bind-Value="item.Unit">
                                    <option value="0">...</option>
                                    <option value="1">ریال</option>
                                    <option value="2">تومان</option>
                                </InputSelect>
                            </td>
                            <td><InputNumber class="form-control" @bind-Value="item.Debit" /></td>
                            <td><InputNumber class="form-control" @bind-Value="item.Credit" /></td>
                            <td class="text-center">
                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveRow(item)">حذف</button>
                            </td>
                        </tr>
                    }
                </tbody>
                 <tfoot>
                    <tr class="h5">
                        <td colspan="3" class="text-end">جمع کل:</td>
                        <td style="background-color: #d1e7dd; color: #0f5132;">@TotalDebit.ToString("N0")</td>
                        <td style="background-color: #f8d7da; color: #842029;">@TotalCredit.ToString("N0")</td>
                        <td></td>
                    </tr>
                     @if (TotalDebit != TotalCredit)
                    {
                        <tr class="h6">
                           <td colspan="3" class="text-end">اختلاف:</td>
                           <td colspan="2" class="text-center" style="background-color: #e2e3e5; color: #41464b;">
                               @((TotalDebit - TotalCredit).ToString("N0"))
                           </td>
                           <td></td>
                        </tr>
                    }
                </tfoot>
            </table>
        </div>

        <hr class="my-4" />
        <div class="mt-4 text-end">
            <button type="submit" class="btn btn-primary btn-lg" disabled="@(TotalDebit == 0 || TotalDebit != TotalCredit)">@GetSubmitButtonText()</button>
            @if (editingDocumentId.HasValue)
            {
                 <button type="button" class="btn btn-secondary btn-lg" @onclick="CancelEdit">انصراف</button>
            }
        </div>
    </EditForm>
</div>

<hr class="my-5" />

<div class="mt-5">
    <h3>لیست اسناد ثبت شده</h3>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th>کد</th>
                    <th>تاریخ</th>
                    <th>شرح</th>
                    <th>جمع بدهکار/بستانکار</th>
                    <th>وضعیت</th>
                    <th>عملیات</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var doc in savedDocuments)
                {
                    <tr>
                        <td>@doc.AccountingCode</td>
                        <td>@doc.Date.ToShortDateString()</td>
                        <td>@doc.Description</td>
                        <td>@doc.Items.Sum(i => i.Debit).ToString("N0")</td>
                        <td>
                            @if (doc.IsFinalized)
                            {
                                <span class="badge bg-success">نهایی شده</span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">پیش‌نویس</span>
                            }
                        </td>
                        <td>
                            @if (!doc.IsFinalized)
                            {
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditDocument(doc)">ویرایش</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteDocument(doc.DocumentId)">حذف</button>
                                <button class="btn btn-sm btn-outline-success" @onclick="() => FinalizeDocument(doc.DocumentId)">نهایی کردن</button>
                            }
                            else
                            {
                                 <button class="btn btn-sm btn-outline-secondary">مشاهده</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private AccountingDocumentDto document = new();
    private List<AccountingDocumentDto> savedDocuments = new();
    private bool isManualAccountingCode = false;
    private Guid? editingDocumentId = null;

    // پراپرتی‌های محاسباتی
    private decimal TotalDebit => document.Items.Sum(i => i.Debit);
    private decimal TotalCredit => document.Items.Sum(i => i.Credit);

    protected override async Task OnInitializedAsync()
    {
        // در یک برنامه واقعی، این اطلاعات از سرویس یا پایگاه داده واکشی می‌شود
        await LoadSampleData();
    }

    private async Task LoadSampleData()
    {

        var result = await Sender.Send(new GetDocumentQuery { pageNumber = 10, pageSize = 1});

        if (result.Success)
        {
            savedDocuments = result.Value.Items;
            await JSRuntime.InvokeVoidAsync("console.log", result.Value);
            StateHasChanged();

        } else
        {
            await JSRuntime.InvokeVoidAsync("console.log", result.Error);
        }
    }

    private void AddNewRow()
    {
        document.Items.Add(new DocumentItemDto { ItemId = Guid.NewGuid() });
    }

    private void RemoveRow(DocumentItemDto item)
    {
        document.Items.Remove(item);
    }

    private async Task HandleValidSubmit()
    {
        // بررسی توازن سند
        if (TotalDebit != TotalCredit || TotalDebit == 0)
        {
            // نمایش خطا به کاربر (می‌توانید از یک کامپوننت نوتیفیکیشن استفاده کنید)
            return;
        }

        if (false) // حالت ویرایش editingDocumentId.HasValu
        {
            // یافتن و به‌روزرسانی سند موجود در لیست
            var docToUpdate = savedDocuments.FirstOrDefault(d => d.DocumentId == editingDocumentId.Value);
            if (docToUpdate != null)
            {
                // اینجا باید اطلاعات از document به docToUpdate منتقل شود
                // در یک سناریوی واقعی، یک درخواست به‌روزرسانی به سرور ارسال می‌شود
                docToUpdate.Description = document.Description;
                docToUpdate.Date = document.Date;
                docToUpdate.Items = new List<DocumentItemDto>(document.Items); // کپی کردن آیتم‌ها
                // و سایر فیلدها...
            }
        }
        else // حالت ایجاد سند جدید
        {
            var command = new CreateDocumentCommand
            {

                Description = document.Description,
                Date = document.Date,
                BankId = 2,
                BranchId = 2,
                Items = document.Items.Select(i => new DocumentItemDto
                {
                    AccountId = 2,
                    DetailId = 1,
                    Description = "i.Description",
                    Debit = i.Debit,
                    Credit = i.Credit,
                    Unit = "1",
                }).ToList(),
                
            };
            var result = await Sender.Send(command);
            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "با موفقیت ثبت شد");
            } else
            {
                await JSRuntime.InvokeVoidAsync("console.log", result.Error);
            }
        }

        // ریست کردن فرم
        CreateNewDocument();
        StateHasChanged();
    }

    private void EditDocument(AccountingDocumentDto docToEdit)
    {
        // برای جلوگیری از تغییر مستقیم روی آبجکت اصلی در لیست، یک کپی از آن ایجاد می‌کنیم
        document = new AccountingDocumentDto
        {
            DocumentId = docToEdit.DocumentId,
            AccountingCode = docToEdit.AccountingCode,
            Date = docToEdit.Date,
            Description = docToEdit.Description,
            IsFinalized = docToEdit.IsFinalized,
            Items = docToEdit.Items.Select(i => new DocumentItemDto { // کپی عمیق از آیتم‌ها
                ItemId = Guid.NewGuid(),
                AccountId = i.AccountId,
                DetailId = i.DetailId,
                Description = i.Description,
                Debit = i.Debit,
                Credit = i.Credit
            }).ToList()
        };
        editingDocumentId = docToEdit.DocumentId;
    }

    private void CancelEdit()
    {
        CreateNewDocument();
    }

    private async Task DeleteDocument(Guid docId)
    {
        // در دنیای واقعی، قبل از حذف باید از کاربر تایید گرفته شود
        // bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "آیا از حذف این سند اطمینان دارید؟");
        // if (confirmed)
        // {
            // ارسال درخواست حذف به سرور
            var docToRemove = savedDocuments.FirstOrDefault(d => d.DocumentId == docId);
            if (docToRemove != null)
            {
                savedDocuments.Remove(docToRemove);
            }
        // }
    }

    private async Task FinalizeDocument(Guid docId)
    {
        // در دنیای واقعی، قبل از نهایی کردن باید از کاربر تایید گرفته شود
        // bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "پس از نهایی کردن، سند قابل ویرایش یا حذف نخواهد بود. آیا ادامه می‌دهید؟");
        // if (confirmed)
        // {
            // ارسال درخواست نهایی کردن به سرور
            var docToFinalize = savedDocuments.FirstOrDefault(d => d.DocumentId == docId);
            if (docToFinalize != null)
            {
                docToFinalize.IsFinalized = true;
            }
        // }
    }
    
    private void CreateNewDocument()
    {
        document = new AccountingDocumentDto();
        editingDocumentId = null;
        isManualAccountingCode = false;
        StateHasChanged();
    }

    private string GetTitle()
    {
        return editingDocumentId.HasValue ? "ویرایش سند حسابداری" : "ثبت سند حسابداری جدید";
    }

    private string GetSubmitButtonText()
    {
        return editingDocumentId.HasValue ? "ذخیره تغییرات" : "ذخیره سند";
    }
}