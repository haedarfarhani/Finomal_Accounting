@page "/contracts"
@using Finomal.UI.Blazor.Components.model
@inject IJSRuntime JSRuntime
@using Finomal.UI.Blazor.Components.Layout
@using Microsoft.JSInterop

<h3><i class="fas fa-file-signature me-2"></i>تعریف و مدیریت قراردادها</h3>

<div class="card shadow-sm mb-4" id="form-container">
    <div class="card-body">
        <EditForm Model="currentContract" OnValidSubmit="HandleSaveContract">
            <DataAnnotationsValidator />

            @* --- بخش اطلاعات اصلی قرارداد --- *@
            <div class="card border-primary mb-3">
                <div class="card-header bg-primary text-white">
                    <h5><i class="fas fa-info-circle me-2"></i>اطلاعات اصلی قرارداد</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        @* -- انتخاب پرسنل -- *@
                        <div class="col-md-4">
                            <label>پرسنل</label>
                            <div class="input-group">
                                <input type="text" class="form-control" readonly placeholder="برای انتخاب کلیک کنید..." value="@(selectedPersonInfo)" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => personnelDialog.Open()">انتخاب</button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label>کد پرسنلی</label>
                            <input type="text" class="form-control" readonly value="@(currentContract.Person?.PersonnelCode)" />
                        </div>
                        
                        @* -- انتخاب نوع شغل -- *@
                        <div class="col-md-3">
                            <label>نوع شغل</label>
                             <div class="input-group">
                                <input type="text" class="form-control" readonly placeholder="انتخاب نوع شغل..." value="@(currentContract.JobTitle)" />
                                <button class="btn btn-outline-secondary" type="button">انتخاب</button>
                            </div>
                        </div>

                        @* -- انتخاب محل خدمت -- *@
                        <div class="col-md-3">
                            <label>محل خدمت / مرکز هزینه</label>
                             <div class="input-group">
                                <input type="text" class="form-control" readonly placeholder="انتخاب مرکز هزینه..." value="@(currentContract.WorkLocation?.Name)" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => workLocationDialog.Open()">انتخاب</button>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label>نوع استخدام</label>
                            <InputSelect class="form-select" @bind-Value="currentContract.ContractType">
                                <option value="">انتخاب کنید...</option>
                                <option>قراردادی</option>
                                <option>پیمانی</option>
                                <option>ساعتی</option>
                                <option>رسمی</option>
                                <option>روزمزد</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-3"><label>تاریخ استخدام</label><InputDate class="form-control" @bind-Value="currentContract.HireDate" /></div>
                        <div class="col-md-3"><label>تاریخ شروع قرارداد<span class="text-danger">*</span></label><InputDate class="form-control" @bind-Value="currentContract.EffectiveDate" /></div>
                        <div class="col-md-3"><label>تاریخ پایان قرارداد</label><InputDate class="form-control" @bind-Value="currentContract.TerminationDate" /></div>
                    </div>
                </div>
            </div>

            @* --- بخش حقوق، مزایا و کسورات --- *@
            <div class="card border-success">
                <div class="card-header bg-success text-white">
                    <h5><i class="fas fa-money-bill-wave me-2"></i>حقوق، مزایا و کسورات</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        @* -- ستون مزایا -- *@
                        <div class="col-md-4">
                            <h6 class="text-success">مزایا</h6>
                            <label>حقوق پایه</label><InputNumber class="form-control mb-2" @bind-Value="currentContract.BaseSalary" />
                            <label>حق اولاد</label><InputNumber class="form-control mb-2" @bind-Value="currentContract.ChildAllowance" />
                            <label>حق مسکن</label><InputNumber class="form-control mb-2" @bind-Value="currentContract.HousingAllowance" />
                            <label>حق خوار و بار</label><InputNumber class="form-control" @bind-Value="currentContract.FoodAllowance" />
                        </div>
                        @* -- ستون کسورات -- *@
                        <div class="col-md-4">
                            <h6 class="text-danger">کسورات</h6>
                            <label>کسر بیمه</label><InputNumber class="form-control mb-2" @bind-Value="currentContract.SocialSecurityDeduction" />
                            <label>کسر بیمه تکمیلی</label><InputNumber class="form-control mb-2" @bind-Value="currentContract.SupplementalInsuranceDeduction" />
                            <label>مالیات</label><InputNumber class="form-control" @bind-Value="currentContract.TaxDeduction" />
                        </div>
                        @* -- ستون خلاصه پرداخت -- *@
                        <div class="col-md-4">
                            <div class="bg-light p-3 rounded h-100">
                                <h6 class="text-primary">خلاصه پرداخت</h6>
                                <div class="d-flex justify-content-between"><span>جمع ناخالص:</span><strong>@currentContract.GrossPay.ToString("N0") ریال</strong></div>
                                <div class="d-flex justify-content-between"><span>جمع کسورات:</span><strong>@currentContract.TotalDeductions.ToString("N0") ریال</strong></div>
                                <hr />
                                <div class="d-flex justify-content-between fs-5"><span>خالص پرداختی:</span><strong class="text-success">@currentContract.NetPay.ToString("N0") ریال</strong></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4 text-end">
                 @if (isEditMode)
                {
                    <button class="btn btn-secondary me-2" type="button" @onclick="CancelEdit"><i class="fas fa-times me-2"></i>انصراف</button>
                }
                <button class="btn btn-primary btn-lg" type="submit"><i class="fas fa-save me-2"></i>ذخیره قرارداد</button>
            </div>
            <ValidationSummary />
        </EditForm>
    </div>
</div>

@* --- جدول لیست قراردادها --- *@
<div class="card shadow-sm">
    <div class="card-header">
        <h4><i class="fas fa-list-alt me-2"></i>لیست قراردادهای ثبت شده</h4>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>پرسنل</th>
                        <th>نوع شغل</th>
                        <th>نوع قرارداد</th>
                        <th>تاریخ شروع</th>
                        <th>تاریخ پایان</th>
                        <th class="text-center">وضعیت</th>
                        <th class="text-center">عملیات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var contract in contractList)
                    {
                        <tr class="@(isEditMode && currentContract.Id == contract.Id ? "table-info" : "")">
                            <td>@contract.Person?.Identity.FirstName @contract.Person?.Identity.LastName</td>
                            <td>@contract.JobTitle</td>
                            <td>@contract.ContractType</td>
                            <td>@contract.EffectiveDate?.ToShortDateString()</td>
                            <td>@contract.TerminationDate?.ToShortDateString()</td>
                            <td class="text-center">
                                <span class="badge @(contract.IsActive ? "bg-success" : "bg-secondary")">
                                    @(contract.IsActive ? "فعال" : "خاتمه یافته")
                                </span>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEdit(contract)" title="ویرایش">
                                    <i class="fas fa-pencil-alt"></i>
                                </button>
                                 <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteContract(contract.Id)" title="حذف">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@* --- تعریف مودال‌ها --- *@

<PersonnelSelectionDialog @ref="personnelDialog" AvailablePersonnel="personnelList" OnPersonSelected="HandlePersonSelected" />
<GenericAddDialog @ref="workLocationDialog" Title="افزودن محل خدمت جدید" OnSave="AddNewWorkLocation" />
@* <SelectionDialog @ref="jobTypeDialog" Title="انتخاب نوع شغل" Items="jobTypes" OnItemSelected="HandleJobTypeSelected" /> *@


@code {
    // --- State ---
    private EmploymentContract currentContract = new();
    private List<EmploymentContract> contractList = new();
    private bool isEditMode = false;

    // --- Data Sources ---
    private List<Person> personnelList = new();
    private List<WorkLocation> workLocations = new();
    private List<string> jobTypes = new() { "کارمند", "کارشناس", "بازاریاب", "مدیر", "کارگر" };


    // --- Component Refs ---
    private PersonnelSelectionDialog personnelDialog = new();
    private GenericAddDialog workLocationDialog = new();
    // private SelectionDialog jobTypeDialog = new();


    private string selectedPersonInfo => currentContract.Person != null ? $"{currentContract.Person.Identity.FirstName}" : "";

    protected override async Task OnInitializedAsync()
    {
        // --- Mock Data ---
        personnelList = new List<Person>
        {
            new Person { Id = 1, PersonnelCode = "P-1001", Identity = new PersonIdentityInfo { FirstName = "علی", LastName = "رضایی"} },
            new Person { Id = 2, PersonnelCode = "P-1002", Identity = new PersonIdentityInfo { FirstName = "سارا", LastName = "محمدی"} }
        };
        workLocations = new List<WorkLocation>
        {
            new WorkLocation { Id = 1, Name = "دفتر مرکزی تهران" },
            new WorkLocation { Id = 2, Name = "کارخانه کرج" },
            new WorkLocation { Id = 3, Name = "شعبه اصفهان" }
        };

        contractList.Add(new EmploymentContract
        {
            Id = 1,
            PersonId = 1,
            Person = personnelList[0],
            JobTitle = "کارشناس",
            ContractType = "رسمی",
            EffectiveDate = new DateTime(2023, 1, 1),
            TerminationDate = new DateTime(2024, 1, 1) // Expired contract
        });
        contractList.Add(new EmploymentContract
        {
            Id = 2,
            PersonId = 2,
            Person = personnelList[1],
            JobTitle = "بازاریاب",
            ContractType = "قراردادی",
            EffectiveDate = new DateTime(2024, 3, 1) // Active contract
        });
        
        await base.OnInitializedAsync();
    }

    private async Task StartEdit(EmploymentContract contractToEdit)
    {
        isEditMode = true;
        currentContract = new EmploymentContract
        {
            Id = contractToEdit.Id,
            PersonId = contractToEdit.PersonId,
            Person = contractToEdit.Person,
            HireDate = contractToEdit.HireDate,
            IssueDate = contractToEdit.IssueDate,
            EffectiveDate = contractToEdit.EffectiveDate,
            TerminationDate = contractToEdit.TerminationDate,
            ContractType = contractToEdit.ContractType,
            WorkLocationId = contractToEdit.WorkLocationId,
            WorkLocation = contractToEdit.WorkLocation,
            JobTitle = contractToEdit.JobTitle,
            BaseSalary = contractToEdit.BaseSalary,
            ChildAllowance = contractToEdit.ChildAllowance,
            HousingAllowance = contractToEdit.HousingAllowance,
            FoodAllowance = contractToEdit.FoodAllowance,
            SocialSecurityDeduction = contractToEdit.SocialSecurityDeduction,
            SupplementalInsuranceDeduction = contractToEdit.SupplementalInsuranceDeduction,
            TaxDeduction = contractToEdit.TaxDeduction
        };
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }
    
    private void CancelEdit()
    {
        currentContract = new();
        isEditMode = false;
    }

    private void HandlePersonSelected(Person person)
    {
        currentContract.PersonId = person.Id;
        currentContract.Person = person;
        StateHasChanged();
    }
    
    private void HandleWorkLocationSelected(string locationName)
    {
        var selectedLocation = workLocations.FirstOrDefault(l => l.Name == locationName);
        if(selectedLocation != null)
        {
            currentContract.WorkLocationId = selectedLocation.Id;
            currentContract.WorkLocation = selectedLocation;
        }
        StateHasChanged();
    }
    
    private void HandleJobTypeSelected(string jobTitle)
    {
        currentContract.JobTitle = jobTitle;
        StateHasChanged();
    }

    private async Task HandleSaveContract()
    {
        if (isEditMode)
        {
            var existingContract = contractList.FirstOrDefault(c => c.Id == currentContract.Id);
            if (existingContract != null)
            {
                // Update properties of existing contract
                // This is a simplified update. In a real app, you would use a mapper or update manually.
                var index = contractList.IndexOf(existingContract);
                contractList[index] = currentContract;
            }
        }
        else
        {
            currentContract.Id = contractList.Any() ? contractList.Max(c => c.Id) + 1 : 1;
            contractList.Add(currentContract);
        }
        
        // Reset form
        currentContract = new();
        isEditMode = false;
        
        // In a real app, show a success notification
        await JSRuntime.InvokeVoidAsync("alert", "قرارداد با موفقیت ذخیره شد");
    }

    private async Task DeleteContract(int contractId)
    {
        // Add confirmation dialog
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "آیا از حذف این قرارداد اطمینان دارید؟");
        if (confirmed)
        {
            var contractToRemove = contractList.FirstOrDefault(c => c.Id == contractId);
            if (contractToRemove != null)
            {
                contractList.Remove(contractToRemove);
            }
        }
    }
    private void AddNewWorkLocation(string name)
    {
        var newLocation = new WorkLocation { Id = workLocations.Max(l => l.Id) + 1, Name = name };
        workLocations.Add(newLocation);
        currentContract.WorkLocationId = newLocation.Id;
    }
}