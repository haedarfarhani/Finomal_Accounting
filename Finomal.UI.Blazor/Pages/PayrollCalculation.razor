@page "/PayrollCalculation"
@using Finomal.UI.Blazor.Components.model
@inject IJSRuntime JSRuntime

<h3><i class="fas fa-cash-register me-2"></i>محاسبه حقوق و دستمزد</h3>

<div class="card shadow-sm">
    <div class="card-body">
        @* --- نوار ابزار اصلی --- *@
        <div class="row g-2 p-3 bg-light border rounded align-items-center mb-3">
            <div class="col-md-3">
                <label class="form-label">نوع محاسبه</label>
                <InputSelect @bind-Value="currentCalculationType" class="form-select">
                    <option value="Salary">حقوق ماهانه</option>
                    <option value="Eid">عیدی</option>
                    <option value="Severance">سنوات</option>
                </InputSelect>
            </div>
            <div class="col-md-2">
                <label class="form-label">سال</label>
                <InputSelect @bind-Value="selectedYear" class="form-select">
                    @for (int year = DateTime.Now.Year - 2; year <= DateTime.Now.Year + 1; year++)
                    {
                        <option value="@year">@year</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-2" hidden="@(currentCalculationType != "Salary")">
                <label class="form-label">ماه</label>
                <InputSelect @bind-Value="selectedMonth" class="form-select">
                    @for (int month = 1; month <= 12; month++)
                    {
                        <option value="@month">@persianMonths[month - 1]</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-5 d-flex align-items-end">
                <button class="btn btn-info ms-1" @onclick="UpdatePersonnelList"><i class="fas fa-sync-alt me-1"></i>بروزرسانی پرسنل</button>
                <button class="btn btn-primary ms-1" @onclick="PerformCalculation"><i class="fas fa-calculator me-1"></i>محاسبه</button>
                <button class="btn btn-success ms-1" @onclick="SaveChanges"><i class="fas fa-save me-1"></i>ذخیره</button>
                <button class="btn btn-secondary" @onclick="Print"><i class="fas fa-print me-1"></i>چاپ</button>
            </div>
        </div>
        <hr />

        @* --- بخش نمایش جدول‌ها --- *@
        <div class="mt-3">
            @* 1. جدول حقوق ماهانه *@
            @if (currentCalculationType == "Salary" && salaryResults.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-sm">
                        <thead class="table-light"><tr><th>کد پرسنلی</th><th>نام پرسنل</th><th>محل خدمت</th><th>مرکز هزینه</th><th>خالص پرداختی</th><th>تاریخ سند</th><th>شماره سند</th></tr></thead>
                        <tbody>
                            @foreach (var result in salaryResults)
                            {
                                <tr>
                                    <td>@result.Person?.PersonnelCode</td>
                                    <td>@result.Person?.Identity.FirstName @result.Person?.Identity.LastName</td>
                                    <td>@result.WorkLocationName</td>
                                    <td>@result.CostCenterName</td>
                                    <td>@result.NetPay.ToString("N0")</td>
                                    <td><InputDate class="form-control form-control-sm" @bind-Value="result.AccountingDocDate" /></td>
                                    <td><InputText class="form-control form-control-sm" @bind-Value="result.AccountingDocNumber" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @* 2. جدول عیدی *@
            @if (currentCalculationType == "Eid" && eidResults.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-sm">
                        <thead class="table-light"><tr><th>کد پرسنلی</th><th>نام پرسنل</th><th>محل خدمت</th><th>مرکز هزینه</th><th>روزهای عیدی</th><th>خالص عیدی</th><th>تاریخ سند</th><th>شماره سند</th></tr></thead>
                        <tbody>
                            @foreach (var result in eidResults)
                            {
                                <tr>
                                    <td>@result.Person?.PersonnelCode</td>
                                    <td>@result.Person?.Identity.FirstName @result.Person?.Identity.LastName</td>
                                    <td>@result.WorkLocationName</td>
                                    <td>@result.CostCenterName</td>
                                    <td>@result.EidDays</td>
                                    <td>@result.NetEidAmount.ToString("N0")</td>
                                    <td><InputDate class="form-control form-control-sm" @bind-Value="result.AccountingDocDate" /></td>
                                    <td><InputText class="form-control form-control-sm" @bind-Value="result.AccountingDocNumber" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @* 3. جدول سنوات *@
            @if (currentCalculationType == "Severance" && severanceResults.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-sm">
                        <thead class="table-light"><tr><th>کد پرسنلی</th><th>نام پرسنل</th><th>محل خدمت</th><th>مرکز هزینه</th><th>تاریخ مبنا</th><th>روزهای سنوات</th><th>روز در سال</th><th>تاریخ سند</th><th>شماره سند</th></tr></thead>
                        <tbody>
                            @foreach (var result in severanceResults)
                            {
                                <tr>
                                    <td>@result.Person?.PersonnelCode</td>
                                    <td>@result.Person?.Identity.FirstName @result.Person?.Identity.LastName</td>
                                    <td>@result.WorkLocationName</td>
                                    <td>@result.CostCenterName</td>
                                    <td>@result.BasisDate.ToShortDateString()</td>
                                    <td>@result.SeveranceDays</td>
                                    <td>@result.DaysInYear</td>
                                    <td><InputDate class="form-control form-control-sm" @bind-Value="result.AccountingDocDate" /></td>
                                    <td><InputText class="form-control form-control-sm" @bind-Value="result.AccountingDocNumber" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (!salaryResults.Any() && !eidResults.Any() && !severanceResults.Any())
            {
                <div class="alert alert-info">برای شروع، نوع محاسبه و دوره را انتخاب کرده و دکمه "محاسبه" را بزنید.</div>
            }
        </div>
    </div>
</div>

@code {
    // --- State ---
    private string currentCalculationType = "Salary";
    private int selectedYear = DateTime.Now.Year;
    private int selectedMonth = DateTime.Now.Month;

    // --- Data Lists ---
    private List<Person> personnelToCalculate = new();
    private List<SalaryCalculationResult> salaryResults = new();
    private List<EidCalculationResult> eidResults = new();
    private List<SeveranceCalculationResult> severanceResults = new();

    // --- UI Helpers ---
    private readonly string[] persianMonths = { "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };

    private void UpdatePersonnelList()
    {
        // In a real app, this would fetch the list of active personnel for the selected period from the database.
        personnelToCalculate = new List<Person>
        {
            new Person { Id = 1, PersonnelCode = "P-1001", Identity = new PersonIdentityInfo { FirstName = "علی", LastName = "رضایی"} },
            new Person { Id = 2, PersonnelCode = "P-1002", Identity = new PersonIdentityInfo { FirstName = "سارا", LastName = "محمدی"} }
        };
        Console.WriteLine($"{personnelToCalculate.Count} personnel updated.");
    }

    private void PerformCalculation()
    {
        // This is the core logic. In a real app, this would be a complex service call.
        // We simulate it here.

        ClearResults();

        if (currentCalculationType == "Salary")
        {
            foreach (var person in personnelToCalculate)
            {
                // Simulate salary calculation based on contract and attendance
                salaryResults.Add(new SalaryCalculationResult
                {
                    PersonId = person.Id,
                    Person = person,
                    NetPay = new Random().Next(15000000, 30000000), // Random salary
                    WorkLocationName = "دفتر مرکزی",
                    CostCenterName = "فنی"
                });
            }
        }
        else if (currentCalculationType == "Eid")
        {
            foreach (var person in personnelToCalculate)
            {
                // Simulate Eid calculation
                eidResults.Add(new EidCalculationResult
                {
                    PersonId = person.Id,
                    Person = person,
                    EidDays = 365,
                    NetEidAmount = new Random().Next(20000000, 40000000), // Random Eid
                    WorkLocationName = "دفتر مرکزی"
                });
            }
        }
        else if (currentCalculationType == "Severance")
        {
            foreach (var person in personnelToCalculate)
            {
                // Simulate Severance calculation
                severanceResults.Add(new SeveranceCalculationResult
                {
                    PersonId = person.Id,
                    Person = person,
                    BasisDate = new DateTime(selectedYear - 1, 1, 1),
                    SeveranceDays = 365,
                    DaysInYear = 365,
                    WorkLocationName = "دفتر مرکزی"
                });
            }
        }
    }

    private void SaveChanges()
    {
        // Logic to save the results of the currently active table to the database.
        if (currentCalculationType == "Salary") Console.WriteLine("Saving Salary Results...");
        if (currentCalculationType == "Eid") Console.WriteLine("Saving Eid Results...");
        if (currentCalculationType == "Severance") Console.WriteLine("Saving Severance Results...");
    }

    private void Print()
    {
        // Logic to generate a printable report for the currently active table.
        JSRuntime.InvokeVoidAsync("alert", $"Printing report for: {currentCalculationType}");
    }

    private void ClearResults()
    {
        salaryResults.Clear();
        eidResults.Clear();
        severanceResults.Clear();
    }
}