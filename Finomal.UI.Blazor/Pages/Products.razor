@page "/Products"
@using Finomal.UI.Blazor.Components.Layout
@using Finomal.UI.Blazor.Components.model
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="container-fluid" id="product-form-container">

    @* بخش نمایش پیام به کاربر *@
    @if (!string.IsNullOrEmpty(userMessage))
    {
        <div class="alert @messageCssClass alert-dismissible fade show" role="alert">
            @userMessage
            <button type="button" class="btn-close" @onclick="() => userMessage = string.Empty" aria-label="Close"></button>
        </div>
    }

    @* ==================== فرم افزودن و ویرایش کالا/خدمت ==================== *@
    <div class="card shadow-sm">
        <div class="card-header">
            <h3>
                @if (isEditMode)
                {
                    <i class="fas fa-pencil-alt me-2"></i>
                
                    <span>ویرایش: @editingProduct?.Name</span>
                }
                else
                {
                    <i class="fas fa-edit me-2"></i>
                
                    <span>تعریف کالا/خدمات جدید</span>
                }
            </h3>
        </div>
        <div class="card-body">
            <EditForm Model="@currentProduct" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @* -- ردیف اول: نوع و گروه -- *@
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">نوع آیتم</label>
                        <div class="form-check form-switch fs-5">
                            <InputCheckbox @bind-Value="currentProduct.IsService" class="form-check-input" id="isServiceSwitch" />
                            <label class="form-check-label" for="isServiceSwitch">
                                @(currentProduct.IsService ? "خدمت" : "کالا")
                            </label>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <label for="category" class="form-label">گروه کالا</label>
                        <div class="input-group">
                            <InputSelect id="category" class="form-select" @bind-Value="currentProduct.CategoryId" @oninput="CategoryChanged">
                                <option value="">-- انتخاب کنید --</option>
                                @foreach (var cat in categories)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </InputSelect>
                            <button class="btn btn-outline-success" type="button" @onclick="() => categoryDialog.Open()">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>

                @* -- ردیف دوم: زیرگروه و نام کالا -- *@
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="subcategory" class="form-label">زیرگروه</label>
                        <div class="input-group">
                            <InputSelect id="subcategory" class="form-select" @bind-Value="currentProduct.SubCategoryId" disabled="@(currentProduct.CategoryId == null)">
                                <option value="">-- انتخاب کنید --</option>
                                @foreach (var subcat in filteredSubCategories)
                                {
                                    <option value="@subcat.Id">@subcat.Name</option>
                                }
                            </InputSelect>
                            <button class="btn btn-outline-success" type="button" @onclick="() => subCategoryDialog.Open()" disabled="@(currentProduct.CategoryId == null)">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="name" class="form-label">نام کالا/خدمت</label>
                        <InputText id="name" class="form-control" @bind-Value="currentProduct.Name" />
                    </div>
                </div>

                @* -- ردیف سوم: سریال و بارکدها -- *@
                <div class="row mb-3" hidden="@currentProduct.IsService">
                    <div class="col-md-4">
                        <label for="serial" class="form-label">شماره مدل/سریال</label>
                        <InputText id="serial" class="form-control" @bind-Value="currentProduct.SerialNumber" />
                    </div>
                    <div class="col-md-4">
                        <label for="barcode1" class="form-label">بارکد اصلی</label>
                        <InputText id="barcode1" class="form-control" @bind-Value="currentProduct.Barcode1" />
                    </div>
                    <div class="col-md-4">
                        <label for="barcode2" class="form-label">بارکد دوم</label>
                        <InputText id="barcode2" class="form-control" @bind-Value="currentProduct.Barcode2" />
                    </div>
                </div>

                @* -- ردیف چهارم: واحد و انبار -- *@
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="unit" class="form-label">واحد</label>
                        <div class="input-group">
                            <InputSelect id="unit" class="form-select" @bind-Value="currentProduct.UnitId">
                                <option value="">-- انتخاب کنید --</option>
                                @foreach (var unit in units)
                                {
                                    <option value="@unit.Id">@unit.Name</option>
                                }
                            </InputSelect>
                            <button class="btn btn-outline-success" type="button" @onclick="() => unitDialog.Open()">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="warehouse" class="form-label">انبار</label>
                        <InputSelect id="warehouse" class="form-select" @bind-Value="currentProduct.WarehouseId" disabled="@currentProduct.IsService">
                            <option value="">-- انتخاب کنید --</option>
                            @foreach (var wh in warehouses)
                            {
                                <option value="@wh.Id">@wh.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                @* -- ردیف پنجم: قیمت‌ها و مالیات -- *@
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="purchasePrice" class="form-label">قیمت خرید</label>
                        <InputNumber id="purchasePrice" class="form-control" @bind-Value="currentProduct.PurchasePrice" />
                    </div>
                    <div class="col-md-4">
                        <label for="sellingPrice" class="form-label">قیمت فروش</label>
                        <InputNumber id="sellingPrice" class="form-control" @bind-Value="currentProduct.SellingPrice" />
                    </div>
                    <div class="col-md-4">
                        <label for="tax" class="form-label">عوارض و مالیات (%)</label>
                        <InputNumber id="tax" class="form-control" @bind-Value="currentProduct.TaxRate" />
                    </div>
                </div>

                <button type="submit" class="btn @(isEditMode ? "btn-success" : "btn-primary")">
                    @if (isEditMode)
                    {
                        <i class="fas fa-save me-1"></i>
                    
                        <span>ذخیره تغییرات</span>
                    }
                    else
                    {
                        <i class="fas fa-plus me-1"></i>
                    
                        <span>افزودن آیتم</span>
                    }
                </button>

                @if (isEditMode)
                {
                    <button type="button" class="btn btn-secondary" @onclick="ResetForm"><i class="fas fa-times me-1"></i>انصراف</button>
                }
            </EditForm>
        </div>
    </div>

    <hr />

    <h3><i class="fas fa-list-ul me-2"></i>لیست آیتم‌ها</h3>
    @if (productList.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>نام</th>
                        <th>گروه</th>
                        <th class="text-center">نوع</th>
                        <th>قیمت فروش</th>
                        <th class="text-center">وضعیت</th>
                        <th class="text-center">عملیات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in productList)
                    {
                        <tr class="@(isEditMode && editingProduct?.Id == product.Id ? "table-info" : "")">
                            <td>@product.Name</td>
                            <td>
                                @{
                                    var categoryName = categories.FirstOrDefault(c => c.Id == product.CategoryId)?.Name;
                                    var subCategoryName = subCategories.FirstOrDefault(sc => sc.Id == product.SubCategoryId)?.Name;
                                }
                                @categoryName
                                @if (!string.IsNullOrEmpty(subCategoryName))
                                {
                                    <span> / @subCategoryName</span>
                                }
                            </td>
                            <td class="text-center">
                                <span class="badge @(product.IsService ? "bg-info text-dark" : "bg-primary")">
                                    @(product.IsService ? "خدمت" : "کالا")
                                </span>
                            </td>
                            <td>@product.SellingPrice.ToString("N0") تومان</td>
                            <td class="text-center">
                                <span class="badge @(product.IsActive ? "bg-success" : "bg-secondary")">
                                    @(product.IsActive ? "فعال" : "غیرفعال")
                                </span>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => StartEdit(product)" title="ویرایش"><i class="fas fa-pencil-alt"></i></button>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleProductStatus(product)" title="تغییر وضعیت"><i class="fas @(product.IsActive ? "fa-toggle-off" : "fa-toggle-on")"></i></button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(product)" title="حذف"><i class="fas fa-trash-alt"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle me-2"></i><span>هیچ آیتمی برای نمایش وجود ندارد.</span>
        </div>
    }

</div>
@* ==================== تعریف مودال‌ها ==================== *@
<CreateCategoryDialog @ref="categoryDialog" OnSave="AddNewCategory" />
<CreateSubCategoryDialog @ref="subCategoryDialog" OnSave="AddNewSubCategory" />
<CreateUnitDialog @ref="unitDialog" OnSave="AddNewUnit" />


@code {
    // Data Models and Form State
    private Product currentProduct = new();
    private Product? editingProduct; // The original product being edited
    private List<Product> productList = new();

    // Data sources for dropdowns
    private List<Category> categories = new();
    private List<SubCategory> subCategories = new();
    private List<SubCategory> filteredSubCategories = new();
    private List<UnitOfMeasure> units = new();
    private List<Warehouse> warehouses = new();

    // Modal references
    private CreateCategoryDialog categoryDialog = new();
    private CreateSubCategoryDialog subCategoryDialog = new();
    private CreateUnitDialog unitDialog = new();

    // UI State
    private bool isEditMode => editingProduct != null;
    private string? userMessage;
    private string messageCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Load initial data (in a real app, this comes from an API)
        // ... (data loading code is kept as is)

        // Sample product data for the table
        if (!productList.Any())
        {
            productList.Add(new Product
            {
                Id = 1,
                Name = "لپ تاپ Dell XPS 15",
                CategoryId = 1,
                SubCategoryId = 10,
                UnitId = 1,
                WarehouseId = 1,
                SellingPrice = 65000000,
                IsActive = true
            });
            productList.Add(new Product
            {
                Id = 2,
                Name = "مشاوره و پشتیبانی ساعتی",
                IsService = true,
                CategoryId = 3,
                SubCategoryId = 13,
                UnitId = 3,
                SellingPrice = 950000,
                IsActive = true
            });
        }
    }

    private void CategoryChanged(ChangeEventArgs e)
    {
        currentProduct.SubCategoryId = null; // Reset subcategory
        if (int.TryParse(e.Value?.ToString(), out var categoryId))
        {
            currentProduct.CategoryId = categoryId;
            filteredSubCategories = subCategories.Where(sc => sc.CategoryId == categoryId).ToList();
        }
        else
        {
            currentProduct.CategoryId = null;
            filteredSubCategories.Clear();
        }
    }

    private void HandleValidSubmit()
    {
        if (isEditMode) // --- UPDATE LOGIC ---
        {
            var index = productList.FindIndex(p => p.Id == editingProduct!.Id);
            if (index != -1)
            {
                productList[index] = currentProduct;
                ShowMessage($"آیتم '{currentProduct.Name}' با موفقیت ویرایش شد.", true);
            }
        }
        else // --- CREATE LOGIC ---
        {
            currentProduct.Id = productList.Any() ? productList.Max(p => p.Id) + 1 : 1;
            productList.Insert(0, currentProduct);
            ShowMessage($"آیتم '{currentProduct.Name}' با موفقیت افزوده شد.", true);
        }

        ResetForm();
    }

    private void ResetForm()
    {
        currentProduct = new();
        editingProduct = null;
        filteredSubCategories.Clear();
    }

    private async Task StartEdit(Product productToEdit)
    {
        // Keep a reference to the original product
        editingProduct = productToEdit;

        // Create a copy for editing
        currentProduct = new Product
        {
            Id = productToEdit.Id,
            Name = productToEdit.Name,
            IsService = productToEdit.IsService,
            CategoryId = productToEdit.CategoryId,
            SubCategoryId = productToEdit.SubCategoryId,
            SerialNumber = productToEdit.SerialNumber,
            Barcode1 = productToEdit.Barcode1,
            Barcode2 = productToEdit.Barcode2,
            UnitId = productToEdit.UnitId,
            WarehouseId = productToEdit.WarehouseId,
            PurchasePrice = productToEdit.PurchasePrice,
            SellingPrice = productToEdit.SellingPrice,
            TaxRate = productToEdit.TaxRate,
            IsActive = productToEdit.IsActive
        };

        // Reload subcategories for the dropdown
        if (currentProduct.CategoryId.HasValue)
        {
            filteredSubCategories = subCategories.Where(sc => sc.CategoryId == currentProduct.CategoryId.Value).ToList();
        }

        await JSRuntime.InvokeVoidAsync("document.getElementById", "product-form-container", "scrollIntoView");
    }

    private async Task ConfirmDelete(Product productToDelete)
    {
        if (isEditMode && editingProduct?.Id == productToDelete.Id)
        {
            ShowMessage("ابتدا عملیات ویرایش را لغو کنید.", false);
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"آیا از حذف آیتم '{productToDelete.Name}' مطمئن هستید؟");
        if (confirmed)
        {
            productList.Remove(productToDelete);
            ShowMessage($"آیتم '{productToDelete.Name}' حذف شد.", true);
        }
    }

    private void ToggleProductStatus(Product productToToggle)
    {
        productToToggle.IsActive = !productToToggle.IsActive;
        var status = productToToggle.IsActive ? "فعال" : "غیرفعال";
        ShowMessage($"وضعیت آیتم '{productToToggle.Name}' به {status} تغییر کرد.", true);
    }

    // Modal save handlers
    private void AddNewCategory(string name)
    {
        var newId = categories.Any() ? categories.Max(c => c.Id) + 1 : 1;
        var newCat = new Category { Id = newId, Name = name };
        categories.Add(newCat);
        currentProduct.CategoryId = newId;
        CategoryChanged(new ChangeEventArgs { Value = newId }); // Refresh subcategories
        ShowMessage($"گروه '{name}' اضافه شد.", true);
    }

    private void AddNewSubCategory(string name)
    {
        if (currentProduct.CategoryId.HasValue)
        {
            var newId = subCategories.Any() ? subCategories.Max(c => c.Id) + 1 : 1;
            var newSubCat = new SubCategory { Id = newId, Name = name, CategoryId = currentProduct.CategoryId.Value };
            subCategories.Add(newSubCat);
            filteredSubCategories.Add(newSubCat);
            currentProduct.SubCategoryId = newId;
            ShowMessage($"زیرگروه '{name}' اضافه شد.", true);
        }
    }

    private void AddNewUnit(string name)
    {
        var newId = units.Any() ? units.Max(u => u.Id) + 1 : 1;
        var newUnit = new UnitOfMeasure { Id = newId, Name = name };
        units.Add(newUnit);
        currentProduct.UnitId = newId;
        ShowMessage($"واحد '{name}' اضافه شد.", true);
    }

    private void ShowMessage(string message, bool isSuccess)
    {
        userMessage = message;
        messageCssClass = isSuccess ? "alert-success" : "alert-danger";

        _ = Task.Run(async () =>
        {
            await Task.Delay(4000);
            userMessage = null;
            await InvokeAsync(StateHasChanged);
        });
    }
    
    // Placeholder class for Warehouse until it's properly injected/managed
    public class Warehouse
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}