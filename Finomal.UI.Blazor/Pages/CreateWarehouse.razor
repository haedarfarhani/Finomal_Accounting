@page "/CreateWarehouse"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime


<div class="container-fluid" id="form-container">

    @* بخش نمایش پیام به کاربر *@
    @if (!string.IsNullOrEmpty(userMessage))
    {
        <div class="alert @messageCssClass alert-dismissible fade show" role="alert">
            @userMessage
            <button type="button" class="btn-close" @onclick="() => userMessage = string.Empty" aria-label="Close"></button>
        </div>
    }

    @* ==================== فرم افزودن و ویرایش ==================== *@
    <div class="card shadow-sm">
        <div class="card-header">
            <h3>
                @if (isEditMode)
                {
                    <i class="fas fa-pencil-alt me-2"></i>
                
                    <span>ویرایش انبار: @editingWarehouse?.Name</span>
                }
                else
                {
                    <i class="fas fa-warehouse me-2"></i>
                
                    <span>تعریف انبار جدید</span>
                }
            </h3>
        </div>
        <div class="card-body">
            <EditForm Model="@currentWarehouse" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="name" class="form-label">نام انبار</label>
                        <InputText id="name" class="form-control" @bind-Value="currentWarehouse.Name" placeholder="مثال: انبار مرکزی تهران" />
                        <ValidationMessage For="@(() => currentWarehouse.Name)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="location" class="form-label">مکان (شهر/منطقه)</label>
                        <InputText id="location" class="form-control" @bind-Value="currentWarehouse.Location" placeholder="مثال: شهریار" />
                        <ValidationMessage For="@(() => currentWarehouse.Location)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="address" class="form-label">آدرس دقیق</label>
                    <InputText id="address" class="form-control" @bind-Value="currentWarehouse.Address" placeholder="خیابان اصلی، کوچه فرعی، پلاک ۵" />
                    <ValidationMessage For="@(() => currentWarehouse.Address)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="phoneNumber" class="form-label">شماره تلفن</label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="currentWarehouse.PhoneNumber" placeholder="مثال: 021-12345678" />
                    <ValidationMessage For="@(() => currentWarehouse.PhoneNumber)" />
                </div>

                @* دکمه های فرم *@
                <button type="submit" class="btn @(isEditMode ? "btn-success" : "btn-primary")" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>در حال ذخیره...</span>
                    }
                    else if (isEditMode)
                    {
                        <i class="fas fa-save me-1"></i>
                        <span>ذخیره تغییرات</span>
                    }
                    else
                    {
                        <i class="fas fa-plus me-1"></i>
                        <span>افزودن انبار</span>
                    }
                </button>

                @if (isEditMode)
                {
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                        <i class="fas fa-times me-1"></i>
                        <span>انصراف</span>
                    </button>
                }
            </EditForm>
        </div>
    </div>

    <hr />

    @* ==================== جدول انبارها ==================== *@
    <h3><i class="fas fa-list-ul me-2"></i>انبارهای تعریف شده</h3>
    @if (warehouses.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>نام انبار</th>
                        <th>مکان</th>
                        <th>آدرس</th>
                        <th>شماره تلفن</th>
                        <th class="text-center">وضعیت</th>
                        <th class="text-center">عملیات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var warehouse in warehouses)
                    {
                        <tr class="@(isEditMode && editingWarehouse?.Id == warehouse.Id ? "table-info" : "")">
                            <td>@warehouse.Name</td>
                            <td>@warehouse.Location</td>
                            <td>@warehouse.Address</td>
                            <td>@warehouse.PhoneNumber</td>
                            <td class="text-center">
                                <span class="badge @(warehouse.IsActive ? "bg-success" : "bg-secondary")">
                                    @(warehouse.IsActive ? "فعال" : "غیرفعال")
                                </span>
                            </td>
                            @* ========== بخش عملیات با آیکون ========== *@
                            <td class="text-center">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => StartEdit(warehouse)" title="ویرایش">
                                    <i class="fas fa-pencil-alt"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleWarehouseStatus(warehouse)" title="تغییر وضعیت">
                                    <i class="fas @(warehouse.IsActive ? "fa-toggle-off" : "fa-toggle-on")"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteWarehouse(warehouse)" title="حذف">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle me-2"></i>
            <span>هیچ انباری تعریف نشده است.</span>
        </div>
    }
</div>

@code {
    // Models and State
    private Warehouse currentWarehouse = new();
    private Warehouse? editingWarehouse; // The original warehouse being edited
    private List<Warehouse> warehouses = new();
    private int nextId = 1;

    // UI State
    private bool isSubmitting = false;
    private bool isEditMode => editingWarehouse != null;
    private string? userMessage;
    private string messageCssClass = string.Empty;

    // Lifecycle Methods
    protected override void OnInitialized()
    {
        // Load sample data
        if (!warehouses.Any())
        {
            warehouses.Add(new Warehouse { Id = nextId++, Name = "انبار محصولات اصلی", Location = "تهران", Address = "جاده مخصوص کرج، کیلومتر ۱۰", PhoneNumber = "021-44556677", IsActive = true });
            warehouses.Add(new Warehouse { Id = nextId++, Name = "انبار مواد اولیه", Location = "اصفهان", Address = "شهرک صنعتی جی، خیابان اول", PhoneNumber = "031-88776655", IsActive = false });
        }
    }

    // CRUD Methods
    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        await Task.Delay(500); // Simulate network latency

        if (isEditMode) // --- UPDATE LOGIC ---
        {
            var index = warehouses.FindIndex(w => w.Id == editingWarehouse!.Id);
            if (index != -1)
            {
                // Update the original object in the list with the values from the edited copy
                warehouses[index] = currentWarehouse;
                ShowMessage($"انبار '{currentWarehouse.Name}' با موفقیت ویرایش شد.", isSuccess: true);
            }
            else
            {
                ShowMessage("خطا: انبار مورد نظر برای ویرایش یافت نشد.", isSuccess: false);
            }
        }
        else // --- CREATE LOGIC ---
        {
            currentWarehouse.Id = nextId++;
            currentWarehouse.IsActive = true;
            warehouses.Insert(0, currentWarehouse);
            ShowMessage($"انبار '{currentWarehouse.Name}' با موفقیت افزوده شد.", isSuccess: true);
        }

        ResetForm();
        isSubmitting = false;
    }

    private async Task ConfirmDeleteWarehouse(Warehouse warehouseToDelete)
    {
        if (isEditMode && editingWarehouse?.Id == warehouseToDelete.Id)
        {
            ShowMessage("نمی‌توانید انباری که در حال ویرایش است را حذف کنید. ابتدا ویرایش را لغو کنید.", isSuccess: false);
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"آیا از حذف انبار '{warehouseToDelete.Name}' مطمئن هستید؟");
        if (confirmed)
        {
            warehouses.Remove(warehouseToDelete);
            ShowMessage($"انبار '{warehouseToDelete.Name}' با موفقیت حذف شد.", isSuccess: true);
        }
    }

    // Edit Mode Methods
    private async Task StartEdit(Warehouse warehouse)
    {
        editingWarehouse = warehouse;
        // Create a copy for editing, to not affect the original data until saved
        currentWarehouse = new Warehouse
        {
            Id = warehouse.Id,
            Name = warehouse.Name,
            Location = warehouse.Location,
            Address = warehouse.Address,
            PhoneNumber = warehouse.PhoneNumber,
            IsActive = warehouse.IsActive
        };
        // Scroll the form into view for better UX on long pages
        await JSRuntime.InvokeVoidAsync("document.getElementById", "form-container", "scrollIntoView");
    }

    private void CancelEdit()
    {
        ResetForm();
        ShowMessage("عملیات ویرایش لغو شد.", isSuccess: true);
    }

    private void ResetForm()
    {
        currentWarehouse = new();
        editingWarehouse = null;
    }

    // Other UI Methods
    private void ToggleWarehouseStatus(Warehouse warehouseToToggle)
    {
        warehouseToToggle.IsActive = !warehouseToToggle.IsActive;
        var status = warehouseToToggle.IsActive ? "فعال" : "غیرفعال";
        ShowMessage($"وضعیت انبار '{warehouseToToggle.Name}' به {status} تغییر یافت.", isSuccess: true);
    }

    private void ShowMessage(string message, bool isSuccess)
    {
        userMessage = message;
        messageCssClass = isSuccess ? "alert-success" : "alert-danger";

        // Auto-hide message
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            userMessage = null;
            await InvokeAsync(StateHasChanged);
        });
    }

    // Data Model
    public class Warehouse
    {
        public int Id { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "وارد کردن نام انبار الزامی است.")]
        public string Name { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "وارد کردن مکان انبار الزامی است.")]
        public string Location { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "وارد کردن آدرس الزامی است.")]
        public string Address { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "وارد کردن شماره تلفن الزامی است.")]
        [System.ComponentModel.DataAnnotations.Phone(ErrorMessage = "فرمت شماره تلفن صحیح نیست.")]
        public string PhoneNumber { get; set; } = string.Empty;

        public bool IsActive { get; set; }
    }
}